package main

var justString string

// var justString string

// func someFunc() {
//   v := createHugeString(1 << 10)
//   justString = v[:100]
// }

// func main() {
//   someFunc()
// }

// Проблемы в данном коде

// Утечка памяти: Основная проблема заключается в том, что хотя мы сохраняем только первые 100 символов из огромной строки,
// исходная большая строка (v) остается в памяти, так как срез строки в Go все еще ссылается на исходный массив байт.
// Потенциальная паника: Если createHugeString вернет строку короче 100 символов, операция среза v[:100]
// вызовет панику (выход за границы).

// justString получает срез первых 100 символов огромной строки
// Но этот срез сохраняет ссылку на исходный массив байт огромной строки
// В результате огромная строка не может быть освобождена сборщиком мусора, пока существует justString

func createHugeString(size int) string {
	var big string = ""
	for i := 0; i < size; i++ {
		big += "1"
	}
	return big
}

func someFunc() {
	v := createHugeString(1 << 10)
	// Создаем новую строку, копируя только нужные данные
	justString = string([]byte(v[:100]))
}

func main() {
	someFunc()
}
